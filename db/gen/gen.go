// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	CustomerInfo *customerInfo
	Good         *good
	GoodOrder    *goodOrder
	Order        *order
	Role         *role
	User         *user
	UserRole     *userRole
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CustomerInfo = &Q.CustomerInfo
	Good = &Q.Good
	GoodOrder = &Q.GoodOrder
	Order = &Q.Order
	Role = &Q.Role
	User = &Q.User
	UserRole = &Q.UserRole
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		CustomerInfo: newCustomerInfo(db, opts...),
		Good:         newGood(db, opts...),
		GoodOrder:    newGoodOrder(db, opts...),
		Order:        newOrder(db, opts...),
		Role:         newRole(db, opts...),
		User:         newUser(db, opts...),
		UserRole:     newUserRole(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CustomerInfo customerInfo
	Good         good
	GoodOrder    goodOrder
	Order        order
	Role         role
	User         user
	UserRole     userRole
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		CustomerInfo: q.CustomerInfo.clone(db),
		Good:         q.Good.clone(db),
		GoodOrder:    q.GoodOrder.clone(db),
		Order:        q.Order.clone(db),
		Role:         q.Role.clone(db),
		User:         q.User.clone(db),
		UserRole:     q.UserRole.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		CustomerInfo: q.CustomerInfo.replaceDB(db),
		Good:         q.Good.replaceDB(db),
		GoodOrder:    q.GoodOrder.replaceDB(db),
		Order:        q.Order.replaceDB(db),
		Role:         q.Role.replaceDB(db),
		User:         q.User.replaceDB(db),
		UserRole:     q.UserRole.replaceDB(db),
	}
}

type queryCtx struct {
	CustomerInfo ICustomerInfoDo
	Good         IGoodDo
	GoodOrder    IGoodOrderDo
	Order        IOrderDo
	Role         IRoleDo
	User         IUserDo
	UserRole     IUserRoleDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CustomerInfo: q.CustomerInfo.WithContext(ctx),
		Good:         q.Good.WithContext(ctx),
		GoodOrder:    q.GoodOrder.WithContext(ctx),
		Order:        q.Order.WithContext(ctx),
		Role:         q.Role.WithContext(ctx),
		User:         q.User.WithContext(ctx),
		UserRole:     q.UserRole.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
