// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"soybean-admin-go/db/model"
)

func newCustomerInfo(db *gorm.DB, opts ...gen.DOOption) customerInfo {
	_customerInfo := customerInfo{}

	_customerInfo.customerInfoDo.UseDB(db, opts...)
	_customerInfo.customerInfoDo.UseModel(&model.CustomerInfo{})

	tableName := _customerInfo.customerInfoDo.TableName()
	_customerInfo.ALL = field.NewAsterisk(tableName)
	_customerInfo.ID = field.NewInt64(tableName, "id")
	_customerInfo.OrderID = field.NewInt64(tableName, "order_id")
	_customerInfo.Name = field.NewString(tableName, "name")
	_customerInfo.Phone = field.NewString(tableName, "phone")
	_customerInfo.Address = field.NewString(tableName, "address")
	_customerInfo.City = field.NewString(tableName, "city")

	_customerInfo.fillFieldMap()

	return _customerInfo
}

type customerInfo struct {
	customerInfoDo customerInfoDo

	ALL     field.Asterisk
	ID      field.Int64
	OrderID field.Int64
	Name    field.String
	Phone   field.String
	Address field.String
	City    field.String

	fieldMap map[string]field.Expr
}

func (c customerInfo) Table(newTableName string) *customerInfo {
	c.customerInfoDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c customerInfo) As(alias string) *customerInfo {
	c.customerInfoDo.DO = *(c.customerInfoDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *customerInfo) updateTableName(table string) *customerInfo {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.OrderID = field.NewInt64(table, "order_id")
	c.Name = field.NewString(table, "name")
	c.Phone = field.NewString(table, "phone")
	c.Address = field.NewString(table, "address")
	c.City = field.NewString(table, "city")

	c.fillFieldMap()

	return c
}

func (c *customerInfo) WithContext(ctx context.Context) ICustomerInfoDo {
	return c.customerInfoDo.WithContext(ctx)
}

func (c customerInfo) TableName() string { return c.customerInfoDo.TableName() }

func (c customerInfo) Alias() string { return c.customerInfoDo.Alias() }

func (c customerInfo) Columns(cols ...field.Expr) gen.Columns {
	return c.customerInfoDo.Columns(cols...)
}

func (c *customerInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *customerInfo) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["order_id"] = c.OrderID
	c.fieldMap["name"] = c.Name
	c.fieldMap["phone"] = c.Phone
	c.fieldMap["address"] = c.Address
	c.fieldMap["city"] = c.City
}

func (c customerInfo) clone(db *gorm.DB) customerInfo {
	c.customerInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c customerInfo) replaceDB(db *gorm.DB) customerInfo {
	c.customerInfoDo.ReplaceDB(db)
	return c
}

type customerInfoDo struct{ gen.DO }

type ICustomerInfoDo interface {
	gen.SubQuery
	Debug() ICustomerInfoDo
	WithContext(ctx context.Context) ICustomerInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICustomerInfoDo
	WriteDB() ICustomerInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICustomerInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICustomerInfoDo
	Not(conds ...gen.Condition) ICustomerInfoDo
	Or(conds ...gen.Condition) ICustomerInfoDo
	Select(conds ...field.Expr) ICustomerInfoDo
	Where(conds ...gen.Condition) ICustomerInfoDo
	Order(conds ...field.Expr) ICustomerInfoDo
	Distinct(cols ...field.Expr) ICustomerInfoDo
	Omit(cols ...field.Expr) ICustomerInfoDo
	Join(table schema.Tabler, on ...field.Expr) ICustomerInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICustomerInfoDo
	Group(cols ...field.Expr) ICustomerInfoDo
	Having(conds ...gen.Condition) ICustomerInfoDo
	Limit(limit int) ICustomerInfoDo
	Offset(offset int) ICustomerInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerInfoDo
	Unscoped() ICustomerInfoDo
	Create(values ...*model.CustomerInfo) error
	CreateInBatches(values []*model.CustomerInfo, batchSize int) error
	Save(values ...*model.CustomerInfo) error
	First() (*model.CustomerInfo, error)
	Take() (*model.CustomerInfo, error)
	Last() (*model.CustomerInfo, error)
	Find() ([]*model.CustomerInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerInfo, err error)
	FindInBatches(result *[]*model.CustomerInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CustomerInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICustomerInfoDo
	Assign(attrs ...field.AssignExpr) ICustomerInfoDo
	Joins(fields ...field.RelationField) ICustomerInfoDo
	Preload(fields ...field.RelationField) ICustomerInfoDo
	FirstOrInit() (*model.CustomerInfo, error)
	FirstOrCreate() (*model.CustomerInfo, error)
	FindByPage(offset int, limit int) (result []*model.CustomerInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICustomerInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c customerInfoDo) Debug() ICustomerInfoDo {
	return c.withDO(c.DO.Debug())
}

func (c customerInfoDo) WithContext(ctx context.Context) ICustomerInfoDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c customerInfoDo) ReadDB() ICustomerInfoDo {
	return c.Clauses(dbresolver.Read)
}

func (c customerInfoDo) WriteDB() ICustomerInfoDo {
	return c.Clauses(dbresolver.Write)
}

func (c customerInfoDo) Session(config *gorm.Session) ICustomerInfoDo {
	return c.withDO(c.DO.Session(config))
}

func (c customerInfoDo) Clauses(conds ...clause.Expression) ICustomerInfoDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c customerInfoDo) Returning(value interface{}, columns ...string) ICustomerInfoDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c customerInfoDo) Not(conds ...gen.Condition) ICustomerInfoDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c customerInfoDo) Or(conds ...gen.Condition) ICustomerInfoDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c customerInfoDo) Select(conds ...field.Expr) ICustomerInfoDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c customerInfoDo) Where(conds ...gen.Condition) ICustomerInfoDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c customerInfoDo) Order(conds ...field.Expr) ICustomerInfoDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c customerInfoDo) Distinct(cols ...field.Expr) ICustomerInfoDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c customerInfoDo) Omit(cols ...field.Expr) ICustomerInfoDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c customerInfoDo) Join(table schema.Tabler, on ...field.Expr) ICustomerInfoDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c customerInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICustomerInfoDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c customerInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ICustomerInfoDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c customerInfoDo) Group(cols ...field.Expr) ICustomerInfoDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c customerInfoDo) Having(conds ...gen.Condition) ICustomerInfoDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c customerInfoDo) Limit(limit int) ICustomerInfoDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c customerInfoDo) Offset(offset int) ICustomerInfoDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c customerInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICustomerInfoDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c customerInfoDo) Unscoped() ICustomerInfoDo {
	return c.withDO(c.DO.Unscoped())
}

func (c customerInfoDo) Create(values ...*model.CustomerInfo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c customerInfoDo) CreateInBatches(values []*model.CustomerInfo, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c customerInfoDo) Save(values ...*model.CustomerInfo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c customerInfoDo) First() (*model.CustomerInfo, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerInfo), nil
	}
}

func (c customerInfoDo) Take() (*model.CustomerInfo, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerInfo), nil
	}
}

func (c customerInfoDo) Last() (*model.CustomerInfo, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerInfo), nil
	}
}

func (c customerInfoDo) Find() ([]*model.CustomerInfo, error) {
	result, err := c.DO.Find()
	return result.([]*model.CustomerInfo), err
}

func (c customerInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CustomerInfo, err error) {
	buf := make([]*model.CustomerInfo, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c customerInfoDo) FindInBatches(result *[]*model.CustomerInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c customerInfoDo) Attrs(attrs ...field.AssignExpr) ICustomerInfoDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c customerInfoDo) Assign(attrs ...field.AssignExpr) ICustomerInfoDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c customerInfoDo) Joins(fields ...field.RelationField) ICustomerInfoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c customerInfoDo) Preload(fields ...field.RelationField) ICustomerInfoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c customerInfoDo) FirstOrInit() (*model.CustomerInfo, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerInfo), nil
	}
}

func (c customerInfoDo) FirstOrCreate() (*model.CustomerInfo, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CustomerInfo), nil
	}
}

func (c customerInfoDo) FindByPage(offset int, limit int) (result []*model.CustomerInfo, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c customerInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c customerInfoDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c customerInfoDo) Delete(models ...*model.CustomerInfo) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *customerInfoDo) withDO(do gen.Dao) *customerInfoDo {
	c.DO = *do.(*gen.DO)
	return c
}
