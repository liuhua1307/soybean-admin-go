// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"soybean-admin-go/db/model"
)

func newGoodOrder(db *gorm.DB, opts ...gen.DOOption) goodOrder {
	_goodOrder := goodOrder{}

	_goodOrder.goodOrderDo.UseDB(db, opts...)
	_goodOrder.goodOrderDo.UseModel(&model.GoodOrder{})

	tableName := _goodOrder.goodOrderDo.TableName()
	_goodOrder.ALL = field.NewAsterisk(tableName)
	_goodOrder.ID = field.NewInt64(tableName, "id")
	_goodOrder.OrderID = field.NewInt64(tableName, "order_id")
	_goodOrder.GoodID = field.NewInt64(tableName, "good_id")
	_goodOrder.Quantity = field.NewInt32(tableName, "quantity")
	_goodOrder.Order = goodOrderBelongsToOrder{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Order", "model.Order"),
		Goods: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Order.Goods", "model.Good"),
		},
		CustomerInfo: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Order.CustomerInfo", "model.CustomerInfo"),
		},
	}

	_goodOrder.Good = goodOrderBelongsToGood{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Good", "model.Good"),
		Orders: struct {
			field.RelationField
			Goods struct {
				field.RelationField
			}
			CustomerInfo struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Good.Orders", "model.Order"),
			Goods: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Good.Orders.Goods", "model.Good"),
			},
			CustomerInfo: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Good.Orders.CustomerInfo", "model.CustomerInfo"),
			},
		},
		GoodOrders: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Good.GoodOrders", "model.GoodOrder"),
		},
	}

	_goodOrder.fillFieldMap()

	return _goodOrder
}

type goodOrder struct {
	goodOrderDo goodOrderDo

	ALL      field.Asterisk
	ID       field.Int64
	OrderID  field.Int64
	GoodID   field.Int64
	Quantity field.Int32
	Order    goodOrderBelongsToOrder

	Good goodOrderBelongsToGood

	fieldMap map[string]field.Expr
}

func (g goodOrder) Table(newTableName string) *goodOrder {
	g.goodOrderDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goodOrder) As(alias string) *goodOrder {
	g.goodOrderDo.DO = *(g.goodOrderDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goodOrder) updateTableName(table string) *goodOrder {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.OrderID = field.NewInt64(table, "order_id")
	g.GoodID = field.NewInt64(table, "good_id")
	g.Quantity = field.NewInt32(table, "quantity")

	g.fillFieldMap()

	return g
}

func (g *goodOrder) WithContext(ctx context.Context) IGoodOrderDo {
	return g.goodOrderDo.WithContext(ctx)
}

func (g goodOrder) TableName() string { return g.goodOrderDo.TableName() }

func (g goodOrder) Alias() string { return g.goodOrderDo.Alias() }

func (g goodOrder) Columns(cols ...field.Expr) gen.Columns { return g.goodOrderDo.Columns(cols...) }

func (g *goodOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goodOrder) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 6)
	g.fieldMap["id"] = g.ID
	g.fieldMap["order_id"] = g.OrderID
	g.fieldMap["good_id"] = g.GoodID
	g.fieldMap["quantity"] = g.Quantity

}

func (g goodOrder) clone(db *gorm.DB) goodOrder {
	g.goodOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g goodOrder) replaceDB(db *gorm.DB) goodOrder {
	g.goodOrderDo.ReplaceDB(db)
	return g
}

type goodOrderBelongsToOrder struct {
	db *gorm.DB

	field.RelationField

	Goods struct {
		field.RelationField
	}
	CustomerInfo struct {
		field.RelationField
	}
}

func (a goodOrderBelongsToOrder) Where(conds ...field.Expr) *goodOrderBelongsToOrder {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a goodOrderBelongsToOrder) WithContext(ctx context.Context) *goodOrderBelongsToOrder {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a goodOrderBelongsToOrder) Session(session *gorm.Session) *goodOrderBelongsToOrder {
	a.db = a.db.Session(session)
	return &a
}

func (a goodOrderBelongsToOrder) Model(m *model.GoodOrder) *goodOrderBelongsToOrderTx {
	return &goodOrderBelongsToOrderTx{a.db.Model(m).Association(a.Name())}
}

type goodOrderBelongsToOrderTx struct{ tx *gorm.Association }

func (a goodOrderBelongsToOrderTx) Find() (result *model.Order, err error) {
	return result, a.tx.Find(&result)
}

func (a goodOrderBelongsToOrderTx) Append(values ...*model.Order) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a goodOrderBelongsToOrderTx) Replace(values ...*model.Order) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a goodOrderBelongsToOrderTx) Delete(values ...*model.Order) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a goodOrderBelongsToOrderTx) Clear() error {
	return a.tx.Clear()
}

func (a goodOrderBelongsToOrderTx) Count() int64 {
	return a.tx.Count()
}

type goodOrderBelongsToGood struct {
	db *gorm.DB

	field.RelationField

	Orders struct {
		field.RelationField
		Goods struct {
			field.RelationField
		}
		CustomerInfo struct {
			field.RelationField
		}
	}
	GoodOrders struct {
		field.RelationField
	}
}

func (a goodOrderBelongsToGood) Where(conds ...field.Expr) *goodOrderBelongsToGood {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a goodOrderBelongsToGood) WithContext(ctx context.Context) *goodOrderBelongsToGood {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a goodOrderBelongsToGood) Session(session *gorm.Session) *goodOrderBelongsToGood {
	a.db = a.db.Session(session)
	return &a
}

func (a goodOrderBelongsToGood) Model(m *model.GoodOrder) *goodOrderBelongsToGoodTx {
	return &goodOrderBelongsToGoodTx{a.db.Model(m).Association(a.Name())}
}

type goodOrderBelongsToGoodTx struct{ tx *gorm.Association }

func (a goodOrderBelongsToGoodTx) Find() (result *model.Good, err error) {
	return result, a.tx.Find(&result)
}

func (a goodOrderBelongsToGoodTx) Append(values ...*model.Good) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a goodOrderBelongsToGoodTx) Replace(values ...*model.Good) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a goodOrderBelongsToGoodTx) Delete(values ...*model.Good) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a goodOrderBelongsToGoodTx) Clear() error {
	return a.tx.Clear()
}

func (a goodOrderBelongsToGoodTx) Count() int64 {
	return a.tx.Count()
}

type goodOrderDo struct{ gen.DO }

type IGoodOrderDo interface {
	gen.SubQuery
	Debug() IGoodOrderDo
	WithContext(ctx context.Context) IGoodOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoodOrderDo
	WriteDB() IGoodOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGoodOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoodOrderDo
	Not(conds ...gen.Condition) IGoodOrderDo
	Or(conds ...gen.Condition) IGoodOrderDo
	Select(conds ...field.Expr) IGoodOrderDo
	Where(conds ...gen.Condition) IGoodOrderDo
	Order(conds ...field.Expr) IGoodOrderDo
	Distinct(cols ...field.Expr) IGoodOrderDo
	Omit(cols ...field.Expr) IGoodOrderDo
	Join(table schema.Tabler, on ...field.Expr) IGoodOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoodOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoodOrderDo
	Group(cols ...field.Expr) IGoodOrderDo
	Having(conds ...gen.Condition) IGoodOrderDo
	Limit(limit int) IGoodOrderDo
	Offset(offset int) IGoodOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodOrderDo
	Unscoped() IGoodOrderDo
	Create(values ...*model.GoodOrder) error
	CreateInBatches(values []*model.GoodOrder, batchSize int) error
	Save(values ...*model.GoodOrder) error
	First() (*model.GoodOrder, error)
	Take() (*model.GoodOrder, error)
	Last() (*model.GoodOrder, error)
	Find() ([]*model.GoodOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoodOrder, err error)
	FindInBatches(result *[]*model.GoodOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GoodOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoodOrderDo
	Assign(attrs ...field.AssignExpr) IGoodOrderDo
	Joins(fields ...field.RelationField) IGoodOrderDo
	Preload(fields ...field.RelationField) IGoodOrderDo
	FirstOrInit() (*model.GoodOrder, error)
	FirstOrCreate() (*model.GoodOrder, error)
	FindByPage(offset int, limit int) (result []*model.GoodOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoodOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goodOrderDo) Debug() IGoodOrderDo {
	return g.withDO(g.DO.Debug())
}

func (g goodOrderDo) WithContext(ctx context.Context) IGoodOrderDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodOrderDo) ReadDB() IGoodOrderDo {
	return g.Clauses(dbresolver.Read)
}

func (g goodOrderDo) WriteDB() IGoodOrderDo {
	return g.Clauses(dbresolver.Write)
}

func (g goodOrderDo) Session(config *gorm.Session) IGoodOrderDo {
	return g.withDO(g.DO.Session(config))
}

func (g goodOrderDo) Clauses(conds ...clause.Expression) IGoodOrderDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodOrderDo) Returning(value interface{}, columns ...string) IGoodOrderDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodOrderDo) Not(conds ...gen.Condition) IGoodOrderDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodOrderDo) Or(conds ...gen.Condition) IGoodOrderDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodOrderDo) Select(conds ...field.Expr) IGoodOrderDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodOrderDo) Where(conds ...gen.Condition) IGoodOrderDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodOrderDo) Order(conds ...field.Expr) IGoodOrderDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodOrderDo) Distinct(cols ...field.Expr) IGoodOrderDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodOrderDo) Omit(cols ...field.Expr) IGoodOrderDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodOrderDo) Join(table schema.Tabler, on ...field.Expr) IGoodOrderDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoodOrderDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoodOrderDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodOrderDo) Group(cols ...field.Expr) IGoodOrderDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodOrderDo) Having(conds ...gen.Condition) IGoodOrderDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodOrderDo) Limit(limit int) IGoodOrderDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodOrderDo) Offset(offset int) IGoodOrderDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodOrderDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodOrderDo) Unscoped() IGoodOrderDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodOrderDo) Create(values ...*model.GoodOrder) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodOrderDo) CreateInBatches(values []*model.GoodOrder, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodOrderDo) Save(values ...*model.GoodOrder) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodOrderDo) First() (*model.GoodOrder, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodOrder), nil
	}
}

func (g goodOrderDo) Take() (*model.GoodOrder, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodOrder), nil
	}
}

func (g goodOrderDo) Last() (*model.GoodOrder, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodOrder), nil
	}
}

func (g goodOrderDo) Find() ([]*model.GoodOrder, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoodOrder), err
}

func (g goodOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoodOrder, err error) {
	buf := make([]*model.GoodOrder, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodOrderDo) FindInBatches(result *[]*model.GoodOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodOrderDo) Attrs(attrs ...field.AssignExpr) IGoodOrderDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodOrderDo) Assign(attrs ...field.AssignExpr) IGoodOrderDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodOrderDo) Joins(fields ...field.RelationField) IGoodOrderDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodOrderDo) Preload(fields ...field.RelationField) IGoodOrderDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodOrderDo) FirstOrInit() (*model.GoodOrder, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodOrder), nil
	}
}

func (g goodOrderDo) FirstOrCreate() (*model.GoodOrder, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodOrder), nil
	}
}

func (g goodOrderDo) FindByPage(offset int, limit int) (result []*model.GoodOrder, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goodOrderDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goodOrderDo) Delete(models ...*model.GoodOrder) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goodOrderDo) withDO(do gen.Dao) *goodOrderDo {
	g.DO = *do.(*gen.DO)
	return g
}
